import crypto from "node:crypto";
import path from "path";
import fs from "fs-extra";

import { type Installer } from "~/installers/index.js";

export const envVariablesInstaller: Installer = ({ projectDir, packages }) => {
  const envContent = getEnvContent(packages?.wallet?.type);

  const envDest = path.join(projectDir, ".env");
  const envExampleDest = path.join(projectDir, ".env.example");

  const _exampleEnvContent = exampleEnvContent + envContent;

  const secret = Buffer.from(
    crypto.getRandomValues(new Uint8Array(32))
  ).toString("base64");
  const _envContent = envContent.replace(
    'AUTH_SECRET=""',
    `AUTH_SECRET="${secret}" # Generated by create-web3-kit.`
  );

  fs.writeFileSync(envDest, _envContent, "utf-8");
  fs.writeFileSync(envExampleDest, _exampleEnvContent, "utf-8");
};

const getEnvContent = (walletType?: "privy" | "rainbow" | "none") => {
  let content = `
# When adding additional environment variables, the schema in "/src/env.js"
# should be updated accordingly.
`
    .trim()
    .concat("\n");

  // Add wallet-specific environment variables
  if (walletType === "privy") {
    content += `
# Privy
NEXT_PUBLIC_PRIVY_APP_ID=""
PRIVY_APP_SECRET=""
`;
  } else if (walletType === "rainbow") {
    content += `
# Rainbow Kit
NEXT_PUBLIC_ALCHEMY_ID=""
NEXT_PUBLIC_WALLET_CONNECT_PROJECT_ID=""
`;
  }

  return content;
};

const exampleEnvContent = `
# Since the ".env" file is gitignored, you can use the ".env.example" file to
# build a new ".env" file when you clone the repo. Keep this file up-to-date
# when you add new variables to \`.env\`.

# This file will be committed to version control, so make sure not to have any
# secrets in it. If you are cloning this repo, create a copy of this file named
# ".env" and populate it with your secrets.
`
  .trim()
  .concat("\n\n");
